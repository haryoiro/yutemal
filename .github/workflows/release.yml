name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Install dependencies (Linux)
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libdbus-1-dev pkg-config

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          go build -ldflags "-X github.com/haryoiro/yutemal/internal/version.Version=$VERSION \
            -X github.com/haryoiro/yutemal/internal/version.Commit=$COMMIT \
            -X github.com/haryoiro/yutemal/internal/version.Date=$DATE" \
            -o yutemal-${{ matrix.suffix }} cmd/yutemal/main.go
        shell: bash

      - name: Create archive (Unix)
        if: matrix.goos != 'windows'
        run: |
          tar -czf yutemal-${{ matrix.suffix }}.tar.gz yutemal-${{ matrix.suffix }} README.md LICENSE config.example.toml
        shell: bash

      - name: Create archive (Windows)
        if: matrix.goos == 'windows'
        run: |
          7z a -tzip yutemal-${{ matrix.suffix }}.zip yutemal-${{ matrix.suffix }} README.md LICENSE config.example.toml
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yutemal-${{ matrix.suffix }}
          path: |
            yutemal-${{ matrix.suffix }}.tar.gz
            yutemal-${{ matrix.suffix }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip